<div class="d-inline position-relative">
    <button class=@GetButtonCssClass() style=@GetButtonStyle() type="button" @onclick="@ShowHideDropdown" @onblur="Collapse" @onkeydown=OnKeyDownHandler>
        <span class="dropdown-text">@Text</span>
    </button>

    @if (isExpanded)
    {
        <div class=@GetDropdownCssClass() style=@GetDropdownStyle()>
            <ul class="m-0 p-0">
                @{
                    foreach (var item in Items)
                    {
                        <DropdownItem Value=@item.Key Text=@item.Value ItemClicked="@DropdownItemClicked" IsSelected="@IsItemSelected(@item.Key)"></DropdownItem>
                    }
                }
            </ul>
        </div>
    }
</div>

@code {
    bool isExpanded = false;
    int selectedValue;

    string Text
    {
        get
        {
            if (Items.Count == 0) return string.Empty;

            if (Items.ContainsKey(selectedValue))
                return Items[selectedValue];
            else
                return Items.Values.First();
        }
    }

    [Parameter]
    public Dictionary<int, string> Items { get; set; } = new();

    [Parameter]
    public string DropdownHeight { get; set; } = string.Empty;  // e.g. 200px

    [Parameter]
    public string Width { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<int> SelectedValueChanged { get; set; }

    bool IsItemSelected(int value)
    {
        return value == selectedValue;
    }

    void DropdownItemClicked(int value)
    {
        SelectItemWithValue(value);
    }

    public async void SelectItemWithValue(int value)
    {
        if (!Items.ContainsKey(value)) return;

        selectedValue = value;
        await SelectedValueChanged.InvokeAsync(selectedValue).ConfigureAwait(true);
    }

    string GetButtonCssClass()
    {
        return $"btn-sm dropdown-button dropdown-toggle dropdown-toggle-on-right";
    }

    string GetButtonStyle()
    {
        return $"width:{Width}; height: 1.4rem;";
    }

    string GetDropdownCssClass()
    {
        return isExpanded ? "dropdown-menu d-block position-absolute m-0 p-0" : "dropdown-menu";
    }

    string GetDropdownStyle()
    {
        string s = "left:5px; overflow-y:auto; overflow-x: hidden;";
        if (!string.IsNullOrEmpty(DropdownHeight))
            s += $" height:{DropdownHeight}";
        return s;
    }

    void ShowHideDropdown()
    {
        isExpanded = !isExpanded;
    }

    void Collapse(FocusEventArgs args)
    {
        isExpanded = false;
    }

    void OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (e.Code != "Escape") return;
        isExpanded = false;
    }
}
