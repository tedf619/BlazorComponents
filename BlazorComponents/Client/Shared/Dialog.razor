<!--This component supports both Modal and Modeless dialogs-->

@inject IJSRuntime js

<dialog @ref="dialogRef" class="dialog" style=@DialogStyle()>
    <DialogTitleBar Title=@Title IsDraggable=IsDraggable OnDragged=@OnDragged />
    <div class="dialog-scrollable">
        <div class="dialog-scrollable-area" style="width: @Width">
            @ChildContent
        </div>
        @if (FooterContent != null)
        {
            <div class="dialog-bottom">
                @FooterContent
            </div>
        }
    </div>
</dialog>

@code {
    ElementReference dialogRef;

    System.Drawing.PointF offset;
    bool open;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Width { get; set; } = "400px";

    [Parameter]
    public bool IsDraggable { get; set; } = true;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? FooterContent { get; set; }

    string DialogStyle()
    {
        return $"transform: translate( {offset.X}px, {offset.Y}px)";
    }

    public async Task ShowModal()
    {
        await js.InvokeVoidAsync("showModalDialog", dialogRef);
    }

    public async Task Show()
    {
        if (open) return;

        await js.InvokeVoidAsync("showModelessDialog", dialogRef);
        open = true;
    }

    public async Task Close()
    {
        await js.InvokeVoidAsync("closeDialog", dialogRef);
        open = false;
    }

    void OnDragged(System.Drawing.PointF newOffset)
    {
        if (!IsDraggable) return;
        offset = newOffset;
    }
}
